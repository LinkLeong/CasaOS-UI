/**
 * CasaOS Local Storage API
 * <picture>     <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_dark_night_800px.png\">     <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_twilight_blue_800px.png\">     <img alt=\"CasaOS\" src=\"https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_twilight_blue_800px.png\"> </picture>  CasaOS Local Storage service manages local storage including disks, partitions and mounting points.  This API allows interacting with the service to conduct such management.  For issues and discussions, please visit the [GitHub repository](https://github.com/IceWhaleTech/CasaOS) or join [our Discord](https://discord.gg/knqAbbBbeX).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseResponse from '../model/BaseResponse';
import GetMounts200Response from '../model/GetMounts200Response';
import Mount from '../model/Mount';
import UpdateMount200Response from '../model/UpdateMount200Response';
import UpdateMount400Response from '../model/UpdateMount400Response';

/**
* MountMethods service.
* @module api/MountMethodsApi
* @version v2
*/
export default class MountMethodsApi {

    /**
    * Constructs a new MountMethodsApi. 
    * @alias module:api/MountMethodsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getMounts operation.
     * @callback module:api/MountMethodsApi~getMountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all mounted volumes
     * Get all volumes currently mounted on the system. Volumes can be filtered by corresponding query parameters.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id Filter the results by id
     * @param {String} opts.mountPoint Filter the results by mount point
     * @param {String} opts.type Filter the results by type
     * @param {String} opts.source Filter the results by source
     * @param {module:api/MountMethodsApi~getMountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMounts200Response}
     */
    getMounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'mount_point': opts['mountPoint'],
        'type': opts['type'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMounts200Response;
      return this.apiClient.callApi(
        '/mount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mount operation.
     * @callback module:api/MountMethodsApi~mountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateMount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mount a volume
     * (TODO)
     * @param {Object} opts Optional parameters
     * @param {module:model/Mount} opts.mount 
     * @param {module:api/MountMethodsApi~mountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateMount200Response}
     */
    mount(opts, callback) {
      opts = opts || {};
      let postBody = opts['mount'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMount200Response;
      return this.apiClient.callApi(
        '/mount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the umount operation.
     * @callback module:api/MountMethodsApi~umountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Umount volume
     * (TODO)
     * @param {String} mountPoint Filter the results by mount point
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.persist `true` if the mount should be removed from `/etc/fstab`, `false` otherwise (default to true)
     * @param {module:api/MountMethodsApi~umountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponse}
     */
    umount(mountPoint, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'mountPoint' is set
      if (mountPoint === undefined || mountPoint === null) {
        throw new Error("Missing the required parameter 'mountPoint' when calling umount");
      }

      let pathParams = {
      };
      let queryParams = {
        'mount_point': mountPoint,
        'persist': opts['persist']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/mount', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMount operation.
     * @callback module:api/MountMethodsApi~updateMountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateMount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a mount volume
     * Updating a mount volume is equivalent to unmounting the volume and mounting it again with the new parameters.
     * @param {String} mountPoint Filter the results by mount point
     * @param {Object} opts Optional parameters
     * @param {module:model/Mount} opts.mount 
     * @param {module:api/MountMethodsApi~updateMountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateMount200Response}
     */
    updateMount(mountPoint, opts, callback) {
      opts = opts || {};
      let postBody = opts['mount'];
      // verify the required parameter 'mountPoint' is set
      if (mountPoint === undefined || mountPoint === null) {
        throw new Error("Missing the required parameter 'mountPoint' when calling updateMount");
      }

      let pathParams = {
      };
      let queryParams = {
        'mount_point': mountPoint
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMount200Response;
      return this.apiClient.callApi(
        '/mount', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
